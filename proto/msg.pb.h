// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace messagek {
class LogInfo;
struct LogInfoDefaultTypeInternal;
extern LogInfoDefaultTypeInternal _LogInfo_default_instance_;
class MoveInfo;
struct MoveInfoDefaultTypeInternal;
extern MoveInfoDefaultTypeInternal _MoveInfo_default_instance_;
class SequenceNotice;
struct SequenceNoticeDefaultTypeInternal;
extern SequenceNoticeDefaultTypeInternal _SequenceNotice_default_instance_;
}  // namespace messagek
PROTOBUF_NAMESPACE_OPEN
template<> ::messagek::LogInfo* Arena::CreateMaybeMessage<::messagek::LogInfo>(Arena*);
template<> ::messagek::MoveInfo* Arena::CreateMaybeMessage<::messagek::MoveInfo>(Arena*);
template<> ::messagek::SequenceNotice* Arena::CreateMaybeMessage<::messagek::SequenceNotice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messagek {

// ===================================================================

class MoveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messagek.MoveInfo) */ {
 public:
  inline MoveInfo() : MoveInfo(nullptr) {}
  ~MoveInfo() override;
  explicit PROTOBUF_CONSTEXPR MoveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveInfo(const MoveInfo& from);
  MoveInfo(MoveInfo&& from) noexcept
    : MoveInfo() {
    *this = ::std::move(from);
  }

  inline MoveInfo& operator=(const MoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveInfo& operator=(MoveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveInfo* internal_default_instance() {
    return reinterpret_cast<const MoveInfo*>(
               &_MoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MoveInfo& a, MoveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveInfo& from) {
    MoveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messagek.MoveInfo";
  }
  protected:
  explicit MoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kHorizontalFieldNumber = 2,
    kVerticalFieldNumber = 3,
    kIsAtkFieldNumber = 4,
  };
  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // int64 horizontal = 2;
  void clear_horizontal();
  int64_t horizontal() const;
  void set_horizontal(int64_t value);
  private:
  int64_t _internal_horizontal() const;
  void _internal_set_horizontal(int64_t value);
  public:

  // int64 vertical = 3;
  void clear_vertical();
  int64_t vertical() const;
  void set_vertical(int64_t value);
  private:
  int64_t _internal_vertical() const;
  void _internal_set_vertical(int64_t value);
  public:

  // bool is_atk = 4;
  void clear_is_atk();
  bool is_atk() const;
  void set_is_atk(bool value);
  private:
  bool _internal_is_atk() const;
  void _internal_set_is_atk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:messagek.MoveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    int64_t horizontal_;
    int64_t vertical_;
    bool is_atk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class LogInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messagek.LogInfo) */ {
 public:
  inline LogInfo() : LogInfo(nullptr) {}
  ~LogInfo() override;
  explicit PROTOBUF_CONSTEXPR LogInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogInfo(const LogInfo& from);
  LogInfo(LogInfo&& from) noexcept
    : LogInfo() {
    *this = ::std::move(from);
  }

  inline LogInfo& operator=(const LogInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInfo& operator=(LogInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogInfo* internal_default_instance() {
    return reinterpret_cast<const LogInfo*>(
               &_LogInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogInfo& a, LogInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogInfo& from) {
    LogInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messagek.LogInfo";
  }
  protected:
  explicit LogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:messagek.LogInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SequenceNotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messagek.SequenceNotice) */ {
 public:
  inline SequenceNotice() : SequenceNotice(nullptr) {}
  ~SequenceNotice() override;
  explicit PROTOBUF_CONSTEXPR SequenceNotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SequenceNotice(const SequenceNotice& from);
  SequenceNotice(SequenceNotice&& from) noexcept
    : SequenceNotice() {
    *this = ::std::move(from);
  }

  inline SequenceNotice& operator=(const SequenceNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequenceNotice& operator=(SequenceNotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SequenceNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const SequenceNotice* internal_default_instance() {
    return reinterpret_cast<const SequenceNotice*>(
               &_SequenceNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SequenceNotice& a, SequenceNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(SequenceNotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SequenceNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SequenceNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SequenceNotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SequenceNotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SequenceNotice& from) {
    SequenceNotice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SequenceNotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messagek.SequenceNotice";
  }
  protected:
  explicit SequenceNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 1,
  };
  // int32 sequence = 1;
  void clear_sequence();
  int32_t sequence() const;
  void set_sequence(int32_t value);
  private:
  int32_t _internal_sequence() const;
  void _internal_set_sequence(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messagek.SequenceNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoveInfo

// string uid = 1;
inline void MoveInfo::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& MoveInfo::uid() const {
  // @@protoc_insertion_point(field_get:messagek.MoveInfo.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveInfo::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messagek.MoveInfo.uid)
}
inline std::string* MoveInfo::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:messagek.MoveInfo.uid)
  return _s;
}
inline const std::string& MoveInfo::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void MoveInfo::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveInfo::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveInfo::release_uid() {
  // @@protoc_insertion_point(field_release:messagek.MoveInfo.uid)
  return _impl_.uid_.Release();
}
inline void MoveInfo::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messagek.MoveInfo.uid)
}

// int64 horizontal = 2;
inline void MoveInfo::clear_horizontal() {
  _impl_.horizontal_ = int64_t{0};
}
inline int64_t MoveInfo::_internal_horizontal() const {
  return _impl_.horizontal_;
}
inline int64_t MoveInfo::horizontal() const {
  // @@protoc_insertion_point(field_get:messagek.MoveInfo.horizontal)
  return _internal_horizontal();
}
inline void MoveInfo::_internal_set_horizontal(int64_t value) {
  
  _impl_.horizontal_ = value;
}
inline void MoveInfo::set_horizontal(int64_t value) {
  _internal_set_horizontal(value);
  // @@protoc_insertion_point(field_set:messagek.MoveInfo.horizontal)
}

// int64 vertical = 3;
inline void MoveInfo::clear_vertical() {
  _impl_.vertical_ = int64_t{0};
}
inline int64_t MoveInfo::_internal_vertical() const {
  return _impl_.vertical_;
}
inline int64_t MoveInfo::vertical() const {
  // @@protoc_insertion_point(field_get:messagek.MoveInfo.vertical)
  return _internal_vertical();
}
inline void MoveInfo::_internal_set_vertical(int64_t value) {
  
  _impl_.vertical_ = value;
}
inline void MoveInfo::set_vertical(int64_t value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:messagek.MoveInfo.vertical)
}

// bool is_atk = 4;
inline void MoveInfo::clear_is_atk() {
  _impl_.is_atk_ = false;
}
inline bool MoveInfo::_internal_is_atk() const {
  return _impl_.is_atk_;
}
inline bool MoveInfo::is_atk() const {
  // @@protoc_insertion_point(field_get:messagek.MoveInfo.is_atk)
  return _internal_is_atk();
}
inline void MoveInfo::_internal_set_is_atk(bool value) {
  
  _impl_.is_atk_ = value;
}
inline void MoveInfo::set_is_atk(bool value) {
  _internal_set_is_atk(value);
  // @@protoc_insertion_point(field_set:messagek.MoveInfo.is_atk)
}

// -------------------------------------------------------------------

// LogInfo

// string username = 1;
inline void LogInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LogInfo::username() const {
  // @@protoc_insertion_point(field_get:messagek.LogInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messagek.LogInfo.username)
}
inline std::string* LogInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:messagek.LogInfo.username)
  return _s;
}
inline const std::string& LogInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void LogInfo::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* LogInfo::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* LogInfo::release_username() {
  // @@protoc_insertion_point(field_release:messagek.LogInfo.username)
  return _impl_.username_.Release();
}
inline void LogInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messagek.LogInfo.username)
}

// string password = 2;
inline void LogInfo::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LogInfo::password() const {
  // @@protoc_insertion_point(field_get:messagek.LogInfo.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogInfo::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messagek.LogInfo.password)
}
inline std::string* LogInfo::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:messagek.LogInfo.password)
  return _s;
}
inline const std::string& LogInfo::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LogInfo::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LogInfo::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* LogInfo::release_password() {
  // @@protoc_insertion_point(field_release:messagek.LogInfo.password)
  return _impl_.password_.Release();
}
inline void LogInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messagek.LogInfo.password)
}

// -------------------------------------------------------------------

// SequenceNotice

// int32 sequence = 1;
inline void SequenceNotice::clear_sequence() {
  _impl_.sequence_ = 0;
}
inline int32_t SequenceNotice::_internal_sequence() const {
  return _impl_.sequence_;
}
inline int32_t SequenceNotice::sequence() const {
  // @@protoc_insertion_point(field_get:messagek.SequenceNotice.sequence)
  return _internal_sequence();
}
inline void SequenceNotice::_internal_set_sequence(int32_t value) {
  
  _impl_.sequence_ = value;
}
inline void SequenceNotice::set_sequence(int32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:messagek.SequenceNotice.sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messagek

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
